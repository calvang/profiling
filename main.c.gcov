        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h> // added
        -:    3:#include <string.h>
        -:    4:#include <unistd.h>
        -:    5:
        -:    6:#define LONG_TIME (0xffffffff/8)
        -:    7:
function child1 called 0 returned 0% blocks executed 0%
    #####:    8:void child1(void) {
    #####:    9:	printf("\n     Inside child1()\n");
call    0 never executed
    #####:   10:	int i = 0;
        -:   11:
    #####:   12:	for( ; i < (LONG_TIME * 2); i++) {
branch  0 never executed
branch  1 never executed
        -:   13:		// Prevent the compiler from optimizing out empty loop
    #####:   14:		asm("nop;");
call    0 never executed
        -:   15:	}
        -:   16:
    #####:   17:	return;
        -:   18:}
        -:   19:
function child2 called 0 returned 0% blocks executed 0%
    #####:   20:void child2(void) {
    #####:   21:	int i = 0;
        -:   22:
    #####:   23:	for( ; i < 16; i++) {
branch  0 never executed
branch  1 never executed
        -:   24:		// Prevent the compiler from optimizing out empty loop
    #####:   25:		asm("nop;");
call    0 never executed
        -:   26:	}
        -:   27:
    #####:   28:	return;
        -:   29:}
        -:   30:
function parent called 0 returned 0% blocks executed 0%
    #####:   31:void parent(void) {
    #####:   32:	printf("\n   Inside parent \n");
call    0 never executed
    #####:   33:	int i = 0;
        -:   34:
    #####:   35:	for (i=0 ; i < (LONG_TIME); i++) {
branch  0 never executed
branch  1 never executed
        -:   36:		// Prevent the compiler from optimizing out empty loop
    #####:   37:		asm("nop;");
call    0 never executed
        -:   38:	}
    #####:   39:	child1();
call    0 never executed
        -:   40:
    #####:   41:	printf("\n     Starting child2() loop\n");
call    0 never executed
    #####:   42:	for (i=0 ; i < (LONG_TIME/2); i++) {
branch  0 never executed
branch  1 never executed
    #####:   43:		child2();
call    0 never executed
        -:   44:	}
        -:   45:
    #####:   46:	return;
        -:   47:}
        -:   48:
function no_children called 0 returned 0% blocks executed 0%
    #####:   49:static void no_children(void) {
    #####:   50:	printf("\n   Inside no_children \n");
call    0 never executed
    #####:   51:	int i = 0;
        -:   52:
    #####:   53:	for (i=0; i < (LONG_TIME * 5); i++) {
branch  0 never executed
branch  1 never executed
        -:   54:		// Prevent the compiler from optimizing out empty loop
    #####:   55:		asm("nop;");
call    0 never executed
        -:   56:	}
        -:   57:
    #####:   58:	return;
        -:   59:}
        -:   60:
function Branch1 called 2000 returned 100% blocks executed 100%
     2000:   61:void Branch1(int i, int prob){
     2000:   62:	if (i < prob) {
branch  0 taken 495 (fallthrough)
branch  1 taken 1505
      495:   63:		printf("\n Inside branch1()\n");
call    0 returned 495
        -:   64:	}
     2000:   65:	return;
        -:   66:}
        -:   67:
function Branch2 called 2000 returned 100% blocks executed 100%
     2000:   68:void Branch2(int i, int prob){
     2000:   69:	if (i < prob) {
branch  0 taken 1005 (fallthrough)
branch  1 taken 995
     1005:   70:		printf("\n Inside branch2()\n");
call    0 returned 1005
        -:   71:	}
     2000:   72:	return;
        -:   73:}
        -:   74:
function Branch3 called 2000 returned 100% blocks executed 100%
     2000:   75:void Branch3(int i, int prob){
     2000:   76:	if (i < prob) {
branch  0 taken 1512 (fallthrough)
branch  1 taken 488
     1512:   77:		printf("\n Inside branch3()\n");
call    0 returned 1512
        -:   78:	}
     2000:   79:	return;
        -:   80:}
        -:   81:
function never called 2000 returned 100% blocks executed 75%
     2000:   82:void never(int i){
     2000:   83:	if (i > 4) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2000
    #####:   84:		printf("\n Inside never()\n");
call    0 never executed
        -:   85:	}
     2000:   86:	return;
        -:   87:}
function always called 2000 returned 100% blocks executed 100%
     2000:   88:void always(int i){
     2000:   89:	if (i < 4) {
branch  0 taken 2000 (fallthrough)
branch  1 taken 0
     2000:   90:		printf("\n Inside always()\n");
call    0 returned 2000
        -:   91:	}
     2000:   92:	return;
        -:   93:}
        -:   94:
function main called 1 returned 100% blocks executed 100%
        1:   95:int main(int argc, char **argv) {
        1:   96:	printf("\n Inside main()\n");
call    0 returned 1
        1:   97:	int i = 0;
        -:   98:	// added 
        -:   99:	//parent();
        -:  100:	//no_children();
        1:  101:	int branch1 = atoi(argv[1]);
call    0 returned 1
        1:  102:	int branch2 = atoi(argv[2]);
call    0 returned 1
        1:  103:	int branch3 = atoi(argv[3]);
call    0 returned 1
     2001:  104:	for (int k = 0; k < 2000; ++k){
branch  0 taken 2000
branch  1 taken 1 (fallthrough)
     2000:  105:		i = rand() % 4; // generate random values from 0 to 3 
call    0 returned 2000
     2000:  106:		Branch1(i,branch1);
call    0 returned 2000
     2000:  107:		Branch2(i,branch2);
call    0 returned 2000
     2000:  108:		Branch3(i,branch3);
call    0 returned 2000
     2000:  109:		never(i);
call    0 returned 2000
     2000:  110:		always(i);
call    0 returned 2000
        -:  111:	}
        1:  112:	printf("\n Exiting \n");
call    0 returned 1
        1:  113:	return 0;
        -:  114:}
